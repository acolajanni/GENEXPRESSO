% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Visualization.R
\name{DEG.pheatmap}
\alias{DEG.pheatmap}
\title{Produce an Heatmap with pheatmap}
\usage{
DEG.pheatmap(
  DEG,
  dataset,
  col.group1 = "cyan",
  col.group2 = "deeppink4",
  n.breaks,
  is.log2,
  sample.condition,
  samples,
  main,
  Cluster.rows = "correlation"
)
}
\arguments{
\item{DEG}{Vector of SYMBOLs of DE genes}

\item{dataset}{Dataframe with sample in columns and genes in rows}

\item{col.group1}{colour for the annotation of the first group}

\item{col.group2}{colour for the annotation of the second group}

\item{n.breaks}{Number of breaks for the colour palette of the heatmap}

\item{is.log2}{Logical value. TRUE if the dataset is on log2 scale}

\item{sample.condition}{Vector of the sample condition in the same order as sample names}

\item{samples}{Vector of the samples in the same order as sample conditions}

\item{main}{Title of the heatmap}

\item{Cluster.rows}{Default values is "correlation" and produce a clustering based on correlation.
A matrix of correlation or a dist class object produced by \link[stats]{dist}
could be pass in argument to replace the default clustering.}
}
\value{

}
\description{
The dataset is subsetted to only keep DE genes in rows. Then, an heatmap from those genes is produced on the two groups within the whole sample
}
\examples{
# Import the dataset
Data = matrix(runif(5000, 10, 100), ncol=20)
group = paste0(rep(c("control", "case"), each = 10),rep(c(1:10),each = 1))
genes <- paste0(rep(LETTERS[1:25], each=10), rep(c(1:10),each = 1))
colnames(Data) = group
row.names(Data) = genes 

# Get a set of particular genes
DEG = genes <- paste0(rep(LETTERS[1:25], each=5), rep(c(1:10),each = 1))

# Get the samples 
sample.condition = c(rep("control", times = 10), rep("case", times = 10) )
samples = colnames(Data)

DEG.pheatmap(DEG, Data, is.log = FALSE, 
 sample.condition = sample.condition, 
 samples = samples, 
 main = "Heatmap on random values" )




# Heatmap on preclusterized genes(rows)
# based on correlation : 
# With a Correlation matrix
clust.rows = cor(t(Data[row.names(Data)\%in\%DEG , ]),
                 use = "pairwise.complete.obs",
                 method = "pearson")


DEG.pheatmap(DEG, Data, is.log = FALSE, 
 sample.condition = sample.condition, 
 samples = samples, 
 Cluster.rows = clust.rows,
 main = "Heatmap on random values" )


# With dist class object

dist.rows = as.dist(1 - clust.rows)

DEG.pheatmap(DEG, Data, is.log = FALSE, 
 sample.condition = sample.condition, 
 samples = samples, 
 Cluster.rows = clust.rows,
 main = "Heatmap on random values" )
 
}
